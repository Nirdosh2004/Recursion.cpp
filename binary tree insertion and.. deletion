
//binary tree insertion and deletion 

#include<iostream>
#include<queue>
using namespace std;

class node{
    public:
    int data ;
    node* left;
    node* right;
    node(int d){
        this -> data = d ;
        this -> left = NULL;
        this -> right = NULL;
    }
};

inline node* buildTree(node* root){
    cout<<"Enter data : ";
    int data;
    cin>>data ;
    root = new node(data);
    if(data == -1){
        return NULL;
    }
    cout<<"For left : ";
    root -> left = buildTree(root -> left);
    cout<<"For right : ";
    root -> right = buildTree(root -> right);
    return root;
}

inline void inorderTraversal(node* root){
    if(root == NULL){
        return ;
    }
    inorderTraversal(root -> left);
    cout<<root -> data<<"     ";
    inorderTraversal(root -> right);
}

inline void preorder(node* root){
    if(root == NULL){
        return ;
    }
    cout<<root -> data<<"     ";
    inorderTraversal(root -> left);
    
    inorderTraversal(root -> right);
}

inline void postorder(node* root){
    if(root == NULL){
        return ;
    }
    inorderTraversal(root -> left);
    
    inorderTraversal(root -> right);
    cout<<root -> data<<"     ";
}
void levelorder(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp == NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp -> data <<"   ";
            if(temp -> left){
                q.push(temp -> left);
            }
            if(temp -> right){
                q.push(temp -> right);
            }
        }
        
    }
    
}

node* deleteNode(node* root, int key) {
    if (root == NULL) {
        return root;
    }

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        if (root->left == NULL) {
            node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            node* temp = root->left;
            delete root;
            return temp;
        }

        node* temp = root->right;
        while (temp->left != NULL) {
            temp = temp->left;
        }

        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
int main(){

    node*  root = NULL ;
    root = buildTree(root);
    
    cout<<endl<<"Inorder traversal : \n";
    inorderTraversal(root);
     cout<<endl;
    preorder(root);
     cout<<endl;
    postorder(root);
     cout<<endl;
    levelorder(root);
     int key;
    cout << "Enter the node value to delete: ";
    cin >> key;
    root = deleteNode(root, key);
     cout<<endl<<"Inorder traversal : \n";
    inorderTraversal(root);
     cout<<endl;
    
    
    return 0;
}
